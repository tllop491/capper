// Unit for managing the lidloader plant

lidloader_plant(
		input signal pusherExtend,vacOn,armSource,armDest;
		input signal refill;	// not used
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherRetracted_GUI,pusherExtended_GUI,WPgripped_GUI,armAtSource_GUI,armAtDest_GUI,empty_GUI;
		)
->	
{
	signal capDec;
	int signal capPos;
	emit capPos(0);
	{	// Arm
		while(true){
			abort(armSource ){ //&& enable
				sustain armAtDest;
			}
			
			abort(armDest){ // && enable
				sustain armAtSource;
			}
		}
	}
	||
	{	// Pusher
		while(true){
			abort(pusherExtend){ // && enable
				sustain pusherRetracted;
			}
			//await(!enable);
			abort(!pusherExtend){ // && enable
				sustain pusherExtended;
			}
			//await(!enable);
		}
	}
	||
	{	// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		int capcount = 5;
		while(true){
			present(capDec){
				if(capcount > 0)
					capcount--;
			}
			present(refill){
				capcount = 5;
			}
//			present(pusherRetracted){
				if(capcount == 0)
					emit empty;
//			}
			pause;
		}
	}
	||
	{// To viz
		{while(true){present(pusherRetracted){emit pusherRetracted_GUI;} pause;}}
		||
		{while(true){present(pusherExtended){emit pusherExtended_GUI;} pause;}}
		||
		{while(true){present(WPgripped){emit WPgripped_GUI;} pause;}}
		||
		{while(true){present(armAtSource){emit armAtSource_GUI;} pause;}}
		||
		{while(true){present(armAtDest){emit armAtDest_GUI;} pause;}}
		||
		{while(true){present(empty){emit empty_GUI;} pause;}}
	}
}
