import rotaryTable.*;

rotary_plant(
		input signal rotaryTableTrigger; // turns rotary table while signal is TRUE
		input signal load, deload;
		output signal tableAlignedWithSensor;
		output signal bottleAtPos1, bottleAtPos1c, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5, bottleLeftPos5;
		
		output signal tableAlignedWithSensor_GUI;
		output signal bottleAtPos1_GUI, bottleAtPos2_GUI, bottleAtPos3_GUI, bottleAtPos4_GUI, bottleAtPos5_GUI, bottleLeftPos5_GUI;
		
		)
->
{	

	signal shift;
	{	// logic for shifting
		while(true) {
			await(rotaryTableTrigger);				// wait for turning signal
			abort(immediate !rotaryTableTrigger) {	// while its on
				waitl(500ms);						// wait 500ms to simulate rotation
				{
					sustain tableAlignedWithSensor;		// send confirmation that turn is complete
				}
				||
				{
					sustain tableAlignedWithSensor_GUI;
				}
				
			}
			emit shift;
		}
	}
	|| // logic for loading/deloading and displaying bottleAtPos
	{
		rotaryTable rt = new rotaryTable();
		while(true) {
			await(load || deload || shift);
			present(shift){
				rt.print();
				System.out.println("SHIFTING");
				rt.shift();
				rt.print();
			}
			present(load){
				rt.print();
				System.out.println("LOADING");
				rt.load();
				rt.print();
			}
			present(deload){
				rt.print();
				System.out.println("DELOADING");
				rt.deload();
				rt.print();
				emit bottleLeftPos5; // this should be channel, conveyor might not pick up
				emit bottleLeftPos5_GUI;
			}
			
			if (rt.index[0] == true) {
				emit bottleAtPos1;
				emit bottleAtPos1c;
				emit bottleAtPos1_GUI;
			}
			
			if (rt.index[1] == true) {
				emit bottleAtPos2;
				emit bottleAtPos2_GUI;
			}
			
			if (rt.index[2] == true) {
				emit bottleAtPos3;
				emit bottleAtPos3_GUI;
			}
			
			if (rt.index[3] == true) {
				emit bottleAtPos4;
				emit bottleAtPos4_GUI;
			}
			
			if (rt.index[4] == true) {
				emit bottleAtPos5;
				emit bottleAtPos5_GUI;
			}
			pause;
		}
	}
}