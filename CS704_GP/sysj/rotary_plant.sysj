import rotaryTable.*;

rotary_plant(
		input signal rotaryTableTrigger; // turns rotary table while signal is TRUE
		input signal load, deload;
		output signal tableAlignedWithSensor;
		output signal bottleAtPos1, bottleAtPos2, bottleAtPos3, bottleAtPos4, bottleAtPos5, bottleAtPos5_c, bottleLeftPos5;
		)
->
{
	rotaryTable rt = new rotaryTable(); 	
	{	// logic for shifting
		while(true) {
			await(rotaryTableTrigger);				// wait for turning signal
			abort(immediate !rotaryTableTrigger) {	// while its on
				waitl(500ms);						// wait 500ms to simulate rotation
				sustain tableAlignedWithSensor;		// send confirmation that turn is complete
			}
			
			rt.print();
			System.out.println("SHIFTING");
			
			rt.shift();
			
			rt.print();
		
		}
	}
	|| // logic for loading/deloading
	{
		while(true) {
			await(load);
			rt.print();
			System.out.println("LOADING");
			rt.load();
			rt.print();
			pause;
		}
	}
	||
	{
		while(true) {
			await(deload);
			rt.print();
			System.out.println("DELOADING");
			rt.deload();
			rt.print();
			emit bottleLeftPos5; // this should be channel, conveyor might not pick up
			pause;
		}
	}
	||
	{  // emitting bottleAtPosX signals
		{
			while(true){
				if (rt.index[0] == true) {
					emit bottleAtPos1;
				}
				pause;
			}
		}
		||
		{
			while(true){
				if (rt.index[1] == true) {
					emit bottleAtPos2;
				}
				pause;
			}
		}
		||
		{
			while(true){
				if (rt.index[2] == true) {
					emit bottleAtPos3;
				}
				pause;
			}
		}
		||
		{
			while(true){
				if (rt.index[3] == true) {
					emit bottleAtPos4;
				}
				pause;
			}
		}
		||
		{
			while(true){
				if (rt.index[4] == true) {
					emit bottleAtPos5;
					emit bottleAtPos5_c;
				}
				pause;
			}
		}
	}
}