import buffer.*;

liquid_buffer(
		input ArrayList channel producerChannel; 
		output ArrayList channel consumerChannel;
		output Boolean channel newOrder;

)->
{
	signal bufferNotFull, bufferNotEmpty, requestData;
	ArrayList signal fromBuffer;
	ArrayList signal toBuffer;
	{
		ArrayList data;
		while(true){
			// While the buffer is not full, receive data over the channel
			present(bufferNotFull){
				receive producerChannel; 
				System.out.println("BUFFER RECEIVING DATA");
				data = (ArrayList)#producerChannel; 
				
				emit toBuffer(data);

				pause; 
			}
			pause;
		}
		pause;
	}
	||
	{
		ArrayList data = new ArrayList();
		while(true){
			// While the buffer is not empty, send data over the channel
			present(bufferNotEmpty){

				emit requestData; 
				
				pause; // Need to delay one tick
				pause; // feedback signal

				present(fromBuffer){
					System.out.println("BUFFER SENDING DATA");
					data = #fromBuffer; 
					send consumerChannel(data);
					pause;
				}

			}
			pause;
		}
		pause;
	}
	||
	{
		// Buffing Data
		Buffer myBuffer = new Buffer(100);
		ArrayList data = new ArrayList();
		while(true){

			present(toBuffer){
				System.out.println("PUSHING TO BUFFER");
				ArrayList liquidData = (ArrayList)#toBuffer;
				myBuffer.push(liquidData);
				
				/*myBuffer.push(liquidData.get(0));
				myBuffer.push(liquidData.get(1));
				myBuffer.push(liquidData.get(2));
				myBuffer.push(liquidData.get(3));*/
			}
			
			present(requestData){
				System.out.println("POPPING FROM BUFFER");
				data = ((ArrayList)myBuffer.pop());
				emit fromBuffer(data);
			}
			
			if(!myBuffer.isFull()){
				emit bufferNotFull;
			}
			if(!myBuffer.isEmpty()){
				emit bufferNotEmpty;
			}
			pause;
		}
	}
	||
	{	// indicate to rotary that a bottle is going to be loaded
		await(toBuffer);
		System.out.println("NEW ORDER");
		send newOrder(Boolean.TRUE);
	}
}