// controller responsible for managing the filler model
// author: Nikolay Petin

filler_controller(
		
		// from buffer
		input Integer[] channel liquidData;
		// from model
		input signal bottleAtPos2;
		input signal dosUnitEvac, dosUnitFilled;
		
		// to rotary
		output signal ready;
		
		// to model
		output signal valveInjectorOnOff, valveInletOnOff;
		output signal dosUnitValveRetract, dosUnitValveExtend;
		output Integer signal nozzleSelect;
		
		)
->
{
	
	while(true) {
		int i = 0;
		recieve liquidData;
		await(bottleAtPos2);					// check if bottle is at pos 2
		abort(i == 5) {
			while(true) {
				// how to send liquid amount?
				nozzleSelect(i);				// select the
				FILL_LIQUID(:dosUnitEvac, dosUnitFilled, valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend);
				i++;
			}
		}
	}
}

reaction FILL_LIQUID(:	input signal dosUnitEvac, dosUnitFilled;
						output signal valveInjectorOnOff, valveInletOnOff, dosUnitValveRetract, dosUnitValveExtend;)
{
	abort(dosUnitFilled) {					// wait until pressure canister is retracted (top)
		{
			sustain valveInjectorOnOff;		// turn on valve injector
		}
		||
		{
			sustain dosUnitValveRetract;	// retract pressure canister to top
		}
	}										// turn off valve injector
	abort(dosUnitEvac) {					// wait until pressure canister is extended (bottom)
		{
			sustain valveInletOnOff;		// open the inlet
			
		}
		||
		{
			sustain dosUnitValveExtend;		// force down pressure canister
		}
	}
}



