reaction ch_to_sig(: input Boolean channel ch_in, output signal sig_out) // doesn't compile with sysimport
{
	while(true) {
		{
			recieve ch_in;
		}
		||
		{
			while(true) {
				if(#ch_in) {
					emit sig_out;
				}
				pause;
			} 
		}
	}
}

conveyor_controller(		
		input Boolean channel bottleAtPos1, bottleLeftPos5; 
		output Boolean channel motConveyorOnOff;
		output Boolean channel conveyorReady;
		)
->{	
	signal bottleAtPos1_i;
	signal bottleLeftPos5_i;
	{
		{
			ch_to_sig(bottleAtPos1, bottleAtPos1_i);
		}
		||
		{
			ch_to_sig(bottleLeftPos5, bottleLeftPos5_i);
		}
		
	}
	||
	{
		while(true){
			await(!bottleLeftPos5_i);												//Wait until there are no bottles on the far end of conveyor via signal bottleLeftPos5
			send motConveryorOnOff(True);											// Enable the conveyor motor
			await(bottleAtPos1_i)													// Check whether the bottle is arrived at position 1 via signal bottleAtPos1
			await(bottleLeftPos5_i);												// Wait until the bottle is successfully left position 5 via signal bottleLeftPos5
			await(!bottleLeftPos5_i);
			send motConveryorOnOff(False);											// Stop the conveyor motor after the bottleLeftPos5 turns false
			send conveyorReady(True);
			}	
		}
	}
}
